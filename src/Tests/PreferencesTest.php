<?php
	/**
	 * Created by PhpStorm.
	 * User: newsy
	 * Date: 31/05/2019
	 * Time: 04:06
	 */

	namespace Framework\Tests;

	use Framework\Syscrack\Game\Preferences;

	class PreferencesTest extends BaseTestCase
	{

		/**
		 * @var Preferences
		 */

		protected static $preferences;

		/**
		 * @var int
		 */

		protected static $userid = 11;
		protected static $computerid = 10;

		/**
		 * Sets up test
		 */

		public static function setUpBeforeClass(): void
		{

			if( isset( self::$preferences ) == false )
				self::$preferences = new Preferences();

			if( self::$preferences->has( self::$userid ) == false )
				self::$preferences->set( self::$userid, [ self::$computerid => [ "cracker" => 11 ] ] );

			parent::setUpBeforeClass(); // TODO: Change the autogenerated stub
		}

		public static function tearDownAfterClass(): void
		{

			if( self::$preferences->has( self::$userid ) )
				self::$preferences->wipe( self::$userid );

			parent::tearDownAfterClass(); // TODO: Change the autogenerated stub
		}

		public function testGetSoftwarePreference()
		{

			$result = self::$preferences->getSoftwarePreference( self::$userid, self::$computerid, "cracker");

			$this->assertNotEmpty( $result );
			$this->assertIsInt( $result );
		}

		public function testHas()
		{

			$this->assertTrue( self::$preferences->has( self::$userid ) );
		}

		public function testGet()
		{

			$result = self::$preferences->get( self::$userid );

			$this->assertNotEmpty( $result );
			$this->assertArrayHasKey(self::$computerid, $result );
		}

		public function testHasSoftwarePreference()
		{

			$this->assertTrue( self::$preferences->hasSoftwarePreference( self::$userid,  self::$computerid,"cracker") );
		}

		public function testAdd()
		{

			self::$preferences->add( self::$userid,  self::$computerid, array('hasher' => 24) );

			$result = self::$preferences->get( self::$userid );

			$this->assertNotEmpty( $result );
			$this->assertArrayHasKey(self::$computerid, $result );
		}

		public function testSet()
		{

			self::$preferences->set( self::$userid, [ self::$computerid => [ "cracker" => 11] ] );
			$result = self::$preferences->get( self::$userid );

			$this->assertNotEmpty( $result );
			$this->assertArrayHasKey(self::$computerid, $result );
		}
	}
