<?php
	declare(strict_types=1);

	namespace Framework\Application\UtilitiesV2\Makers;

	use Framework\Application;
	use Framework\Application\UtilitiesV2\Conventions\FileData;
	use Framework\Application\UtilitiesV2\Conventions\TokenData;
	use Framework\Application\UtilitiesV2\FileOperator;
	use Framework\Application\Utilities\FileSystem;
	use Framework\Application\UtilitiesV2\Format;

	/**
	 * Class Maker
	 * @package Framework\Application\UtilitiesV2\Makers
	 */
	class Maker extends Base
	{

		/**
		 * @param FileData|null $template
		 */

		public function before(FileData $template = null): void
		{

			if ($template == null)
				$template = FileOperator::pathDataInstance("resources/templates/template_maker.module");

			parent::before($template);
		}

		/**
		 * @param TokenData $values
		 * @param $path
		 *
		 * @return FileData
		 */

		public function make(TokenData $values, $path): FileData
		{

			if( FileSystem::exists( "resources/templates/template_" . strtolower( $values->arrayValue("values", "classname") ) . ".module") == false )
				FileSystem::write( "resources/templates/template_" . strtolower( $values->arrayValue("values", "classname") ) . ".module", $this->example() );

			return parent::make($values, $path); // TODO: Change the autogenerated stub
		}

		/**
		 * @return string
		 */

		public function example()
		{

			if( FileSystem::exists( "resources/templates/template_default.module") == false )
				return "";

			return( FileSystem::read( "resources/templates/template_default.module" ) );
		}
		/**
		 * @return string
		 */

		public function filepath(): string
		{
			return( Application::globals()->MAKER_FILEPATH );
		}

		/**
		 * @return string
		 */

		public function namespace(): string
		{

			return( Format::rc( Application::globals()->MAKER_NAMESPACE ) );
		}
	}