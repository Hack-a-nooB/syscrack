<?php
	namespace Framework\Application\UtilitiesV2\Scripts;

	/**
	 * Class Php
	 *
	 * Automatically created at: 2019-05-30 00:27:27
	 * @package Framework\Application\UtilitiesV2\Scripts
	 */

	use Framework\Application\UtilitiesV2\Debug;

	class Php extends Base
	{

	    /**
	     * The logic of your script goes in this function.
	     *
	     * @param $arguments
	     * @return bool
	     */

	    public function execute($arguments)
	    {


	    	if( empty( Instance::$raw_line ) )
				Debug::echo("Please enter something...");

	    	if( strpos( Instance::$raw_line, 'php') !== false )
			    $line = str_replace('php','', Instance::$raw_line );
			else
				$line = Instance::$raw_line;

	    	Debug::echo("Executing: " . $line );

	    	try
		    {

		    	$result = eval( $line );

		    	if( empty( $result ) == false )
		    		Debug::echo( $result );
		    }
		    catch ( \RuntimeException $error )
		    {

		    	Debug::echo("\nCaught Runtime Exception");
		    	Debug::echo( $error->getMessage(), 1 );
			    Debug::echo( $error->getCode(), 1 );
			    Debug::echo( $error->getTrace() );
		    }
		    catch ( \Error $error )
		    {

			    Debug::echo("\nCaught Error Exception");
			    Debug::echo( $error->getMessage(), 1 );
			    Debug::echo( $error->getCode(), 1 );
		    }

		    Debug::echo("\n Finished eval (did your server blow up?)");

	        return parent::execute($arguments); // TODO: Change the autogenerated stub
	    }

	    /**
	     * The help index can either be a string or an array containing a set of strings. You can only put strings in
	     * there.
	     *
	     * @return array
	     */

	    public function help()
	    {
	        return([
	            "arguments" => $this->requiredArguments(),
	            "help" => "Hello World"
	        ]);
	    }

	    /**
	     * Example:
	     *  [
	     *      "file"
	     *      "name"
	     *  ]
	     *
	     *  View from the console:
	     *      Php file=myfile.php name=no_space
	     *
	     * @return array|null
	     */

	    public function requiredArguments()
	    {

	        return parent::requiredArguments();
	    }
	}