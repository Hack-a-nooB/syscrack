<?php

	namespace Framework\Application\UtilitiesV2\Scripts;

	/**
	 * Class Settings
	 *
	 * Automatically created at: 2019-04-30 23:14:52
	 */

	use Framework\Application\Settings as ApplicationSettings;
	use Framework\Application\UtilitiesV2\Debug;

	class Settings extends Base
	{

		/**
		 * The logic of your script goes in this function.
		 *
		 * @param $arguments
		 *
		 * @return bool
		 */

		public function execute($arguments)
		{

			if (isset($arguments["action"]) == false)
				$this->all();
			else
			{

				switch ($arguments["action"])
				{

					case "search":
						return $this->search($arguments);
						break;
					case "new":
						return $this->new($arguments);
						break;
					case "update":
						return $this->update($arguments);
						break;
					case "delete":
						return $this->delete($arguments);
						break;
					default:
						$this->all();
						break;
				}
			}

			return parent::execute($arguments); // TODO: Change the autogenerated stub
		}

		/**
		 *
		 */

		public function all()
		{

			$settings = ApplicationSettings::settings();

			Debug::echo("");
			Debug::echo("Displaying all " . count($settings) . " settings...");
			Debug::echo("");
			Debug::echo($settings);
		}

		/**
		 * @param $arguments
		 *
		 * @return bool
		 */

		public function search($arguments)
		{

			if (isset($arguments["setting"]) == false)
			{
				Debug::echo("Missing setting");
				return false;
			}

			Debug::echo("");
			Debug::echo("Search term: " . $arguments["setting"]);

			$results = [];
			$settings = ApplicationSettings::settings();

			foreach ($settings as $item => $value)
				if (strstr($item, $arguments["setting"]) !== false)
					$results[] = $item . " => " . $value;

			Debug::echo("");
			Debug::echo("Search complete gathered " . count($results) . " results:");
			Debug::echo($results, 2);
			Debug::echo("");
		}

		/**
		 * @param $arguments
		 *
		 * @return bool
		 */

		public function new($arguments)
		{

			if (isset($arguments["setting"]) == false)
			{
				Debug::echo("Missing setting");
				return false;
			}

			if (isset($arguments["value"]) == false)
				$arguments["value"] = "";

			Debug::echo("");
			Debug::echo("Creating new setting: " . $arguments["setting"] . " => " . $arguments["value"]);

			ApplicationSettings::addSetting($arguments["setting"], $arguments["value"], true);

			Debug::echo("");
			Debug::echo("Completed");
		}

		/**
		 * @param $arguments
		 *
		 * @return bool
		 */

		public function update($arguments)
		{

			if (isset($arguments["setting"]) == false)
			{
				Debug::echo("Missing setting");
				return false;
			}

			if (isset($arguments["value"]) == false)
			{
				Debug::echo("Missing value");
				return false;
			}

			Debug::echo("");
			Debug::echo("Editing setting: " . $arguments["setting"] . " => " . $arguments["value"]);

			ApplicationSettings::updateSetting($arguments["setting"], $arguments["value"], true);

			Debug::echo("");
			Debug::echo("Completed");
		}

		/**
		 * @param $arguments
		 *
		 * @return bool
		 */

		public function delete($arguments)
		{

			if (isset($arguments["setting"]) == false)
			{
				Debug::echo("Missing setting");
				return false;
			}


			Debug::echo("Are you sure you want to delete: " . $arguments["setting"]);


			$response = Debug::getLine("[Y/N]");

			if (strtolower($response) === "y")
			{

				Debug::echo("");
				Debug::echo("Deleting setting: " . $arguments["setting"]);

				ApplicationSettings::removeSetting($arguments["setting"], true);
			}

			Debug::echo("");
			Debug::echo("Completed");
		}


		/**
		 * The help index can either be a string or an array containing a set of strings. You can only put strings in
		 * there.
		 *
		 * @return array
		 */

		public function help()
		{
			return ([
				"arguments" => [
					"action",
					"setting",
					"value"
				],
				"help" => [
					"Actions",
					"   new, search, update, delete"
				]
			]);
		}

		/**
		 * Example:
		 *  [
		 *      "file"
		 *      "name"
		 *  ]
		 *
		 *  View from the console:
		 *      Settings file=myfile.php name=no_space
		 *
		 * @return array|null
		 */

		public function requiredArguments()
		{

			return (parent::requiredArguments());
		}
	}